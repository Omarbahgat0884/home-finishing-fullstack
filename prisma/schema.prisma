// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    isAdmin       Boolean   @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// MY SCHEMA
model ServiceCategory {
    id          String    @id @default(cuid())
    name        String
    description String?
    services    Service[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@map("service_categories")
}

model Service {
    id          String          @id @default(cuid())
    name        String
    description String?
    price       Decimal
    imageUrl    String?
    category    ServiceCategory @relation(fields: [categoryId], references: [id])
    categoryId  String
    bookings    Booking[]
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    @@map("services")
}

model Contractor {
    id             String    @id @default(cuid())
    name           String
    phone          String
    email          String    @unique
    specialization String?
    rating         Float?    @default(0)
    bookings       Booking[]
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    @@map("contractors")
}

model Customer {
    id        String    @id @default(cuid())
    name      String
    email     String    @unique
    phone     String
    bookings  Booking[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@map("customers")
}

model Booking {
    id           String        @id @default(cuid())
    service      Service       @relation(fields: [serviceId], references: [id])
    serviceId    String
    customer     Customer      @relation(fields: [customerId], references: [id])
    customerId   String
    contractor   Contractor    @relation(fields: [contractorId], references: [id])
    contractorId String
    date         DateTime
    status       BookingStatus @default(PENDING)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    @@map("bookings")
}

enum BookingStatus {
    PENDING
    CONFIRMED
    IN_PROGRESS
    COMPLETED
    CANCELLED
}
